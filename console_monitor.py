"""–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞."""
import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from test_server_simple import server


class ConsoleMonitor:
    """–ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        self.running = True
    
    def clear_screen(self):
        """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞."""
        os.system('cls' if os.name == 'nt' else 'clear')
    
    def print_header(self):
        """–í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞."""
        print("=" * 80)
        print("üöÄ NAVTELECOM SERVER - –ö–û–ù–°–û–õ–¨–ù–´–ô –ú–û–ù–ò–¢–û–†")
        print("=" * 80)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
    
    def print_server_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞."""
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ï–†–í–ï–†–ê")
        print("-" * 40)
        
        stats = server.stats
        all_devices = server.get_all_devices()
        
        print(f"üîó –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {stats['connections_total']}")
        print(f"üì° –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–¥—Ä–æ–≤: {stats['frames_processed']}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
        print(f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(all_devices)}")
        print()
    
    def print_devices(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö."""
        all_devices = server.get_all_devices()
        
        if not all_devices:
            print("üì± –£–°–¢–†–û–ô–°–¢–í–ê")
            print("-" * 40)
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
            print()
            return
        
        print("üì± –£–°–¢–†–û–ô–°–¢–í–ê")
        print("-" * 40)
        
        for i, (unique_id, device_data) in enumerate(all_devices.items(), 1):
            print(f"{i}. üì± {unique_id}")
            print(f"   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {device_data['last_seen'].strftime('%H:%M:%S')}")
            
            # GPS –ø–æ–∑–∏—Ü–∏–∏
            positions = device_data.get('positions', [])
            print(f"   üìç GPS –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
            
            if positions:
                last_pos = positions[-1]
                print(f"   üìç –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è:")
                print(f"      üïê –í—Ä–µ–º—è: {last_pos['fix_time'].strftime('%H:%M:%S')}")
                print(f"      üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({last_pos['latitude']:.6f}, {last_pos['longitude']:.6f})")
                print(f"      üöó –°–∫–æ—Ä–æ—Å—Ç—å: {last_pos['speed']:.1f} –∫–º/—á")
                print(f"      üß≠ –ö—É—Ä—Å: {last_pos['course']:.1f}¬∞")
                print(f"      üõ∞Ô∏è –°–ø—É—Ç–Ω–∏–∫–∏: {last_pos['satellites']}")
            
            # CAN –¥–∞–Ω–Ω—ã–µ
            can_data = device_data.get('can_data', [])
            print(f"   üîß CAN –∑–∞–ø–∏—Å–µ–π: {len(can_data)}")
            
            if can_data:
                print(f"   üîß –ü–æ—Å–ª–µ–¥–Ω–∏–µ CAN –¥–∞–Ω–Ω—ã–µ:")
                for can in can_data[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2
                    print(f"      CAN ID: {can['can_id']}, –î–∞–Ω–Ω—ã–µ: {can['can_data_hex']}")
            
            # –°–æ–±—ã—Ç–∏—è
            events = device_data.get('events', [])
            print(f"   üì¢ –°–æ–±—ã—Ç–∏–π: {len(events)}")
            
            if events:
                print(f"   üì¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
                for event in events[-2:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 2
                    print(f"      –¢–∏–ø: {event['event_type']}, –î–∞–Ω–Ω—ã–µ: {event['event_data']}")
            
            print()
    
    def print_recent_activity(self):
        """–í—ã–≤–æ–¥ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        print("üîÑ –ù–ï–î–ê–í–ù–Ø–Ø –ê–ö–¢–ò–í–ù–û–°–¢–¨")
        print("-" * 40)
        
        all_devices = server.get_all_devices()
        current_time = datetime.now()
        
        recent_activity = []
        
        for unique_id, device_data in all_devices.items():
            last_seen = device_data['last_seen']
            time_diff = (current_time - last_seen.replace(tzinfo=None)).seconds
            
            if time_diff < 300:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
                recent_activity.append({
                    'device': unique_id,
                    'last_seen': last_seen,
                    'time_diff': time_diff,
                    'positions': len(device_data.get('positions', [])),
                    'can_data': len(device_data.get('can_data', [])),
                    'events': len(device_data.get('events', []))
                })
        
        if recent_activity:
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            recent_activity.sort(key=lambda x: x['last_seen'], reverse=True)
            
            for activity in recent_activity[:5]:  # –¢–æ–ø 5
                time_str = f"{activity['time_diff']}—Å –Ω–∞–∑–∞–¥"
                print(f"üì± {activity['device']} - {time_str}")
                print(f"   üìç {activity['positions']} –ø–æ–∑–∏—Ü–∏–π, üîß {activity['can_data']} CAN, üì¢ {activity['events']} —Å–æ–±—ã—Ç–∏–π")
        else:
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç")
        
        print()
    
    def print_instructions(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π."""
        print("üí° –£–ü–†–ê–í–õ–ï–ù–ò–ï")
        print("-" * 40)
        print("üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥")
        print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("üìä –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print()
    
    def display_data(self):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö."""
        self.clear_screen()
        self.print_header()
        self.print_server_stats()
        self.print_devices()
        self.print_recent_activity()
        self.print_instructions()
    
    async def run_monitor(self, interval=5):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∞...")
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...")
        
        try:
            while self.running:
                self.display_data()
                await asyncio.sleep(interval)
                
        except KeyboardInterrupt:
            print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.running = False
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            self.running = False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    monitor = ConsoleMonitor()
    await monitor.run_monitor(interval=3)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã


if __name__ == "__main__":
    asyncio.run(main())

