"""–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è FLEX –ø—Ä–æ—Ç–æ–∫–æ–ª–∞."""
import asyncio
import socket
import time
import random


async def test_flex_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å FLEX –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º."""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        reader, writer = await asyncio.open_connection('localhost', 5221)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ FLEX —Å–æ–æ–±—â–µ–Ω–∏—è
        flex_messages = [
            "123456789012345,55.7558,37.6176,30.0,90.0,8,2.0",
            "123456789012345,55.7599,37.6152,32.7,90.0,8,2.2",
            "123456789012345,55.7500,37.6200,25.5,180.0,10,1.8",
            "987654321098765,55.8000,37.7000,45.0,270.0,12,2.5"
        ]
        
        for i, message in enumerate(flex_messages, 1):
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ FLEX —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {message}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            writer.write(message.encode('utf-8'))
            await writer.drain()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            try:
                response = await asyncio.wait_for(reader.read(1024), timeout=5)
                response_text = response.decode('utf-8', errors='ignore')
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_text}")
            except asyncio.TimeoutError:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(2)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        writer.close()
        await writer.wait_closed()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def test_mixed_protocols():
    """–¢–µ—Å—Ç —Å–º–µ—à–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤."""
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        reader, writer = await asyncio.open_connection('localhost', 5221)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –°–º–µ—à–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            # Navtelecom –ø—Ä–æ—Ç–æ–∫–æ–ª
            "~A123456789012345,1758122293,55.7558,37.6176,30.0,90.0,8,2.0~",
            # FLEX –ø—Ä–æ—Ç–æ–∫–æ–ª
            "123456789012345,55.7599,37.6152,32.7,90.0,8,2.2",
            # Navtelecom CAN
            "~T123456789012345,180,01,E9,41,B2,35,90,CF,DF~",
            # FLEX —Å –¥—Ä—É–≥–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            "987654321098765,55.8000,37.7000,45.0,270.0,12,2.5"
        ]
        
        for i, message in enumerate(messages, 1):
            protocol = "Navtelecom" if "~" in message else "FLEX"
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ {protocol} —Å–æ–æ–±—â–µ–Ω–∏—è {i}: {message}")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            writer.write(message.encode('utf-8'))
            await writer.drain()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            try:
                response = await asyncio.wait_for(reader.read(1024), timeout=5)
                response_text = response.decode('utf-8', errors='ignore')
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response_text}")
            except asyncio.TimeoutError:
                print("‚è∞ –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            await asyncio.sleep(2)
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        writer.close()
        await writer.wait_closed()
        print("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –°–ï–†–í–ï–†–ê")
    print("=" * 50)
    
    print("\nüîç –¢–µ—Å—Ç 1: FLEX –ø—Ä–æ—Ç–æ–∫–æ–ª")
    print("-" * 30)
    await test_flex_connection()
    
    await asyncio.sleep(3)
    
    print("\nüîç –¢–µ—Å—Ç 2: –°–º–µ—à–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã")
    print("-" * 30)
    await test_mixed_protocols()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main())
