"""–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
import socket
import time
import random
from datetime import datetime


def check_server_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê NAVTELECOM –°–ï–†–í–ï–†–ê")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect(('localhost', 5221))
        print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5221")
        sock.close()
    except ConnectionRefusedError:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5221")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    
    # –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    print("\nüì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect(('localhost', 5221))
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ GPS –∫–∞–¥—Ä–∞
        test_imei = "123456789012345"
        timestamp = int(time.time())
        lat = 55.7558 + random.uniform(-0.01, 0.01)
        lon = 37.6176 + random.uniform(-0.01, 0.01)
        speed = random.uniform(0, 60)
        satellites = random.randint(4, 12)
        hdop = round(random.uniform(1.0, 3.0), 1)
        
        gps_frame = f"~A{test_imei},{timestamp},{lat},{lon},{speed},90.0,{satellites},{hdop}~"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ GPS –∫–∞–¥—Ä–∞: {gps_frame}")
        sock.send(gps_frame.encode('utf-8'))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        time.sleep(0.5)
        sock.settimeout(2)
        response = sock.recv(1024)
        
        if response and b'ACK' in response:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ACK –æ—Ç–≤–µ—Ç: {response.decode('utf-8')}")
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GPS –¥–∞–Ω–Ω—ã–µ")
        else:
            print("‚ö†Ô∏è ACK –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ CAN –∫–∞–¥—Ä–∞
        can_id = "180"
        can_data = [f"{random.randint(0, 255):02X}" for _ in range(8)]
        can_data_str = ",".join(can_data)
        can_frame = f"~T{test_imei},{can_id},{can_data_str}~"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ CAN –∫–∞–¥—Ä–∞: {can_frame}")
        sock.send(can_frame.encode('utf-8'))
        
        time.sleep(0.5)
        sock.settimeout(2)
        response = sock.recv(1024)
        
        if response and b'ACK' in response:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ACK –æ—Ç–≤–µ—Ç: {response.decode('utf-8')}")
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CAN –¥–∞–Ω–Ω—ã–µ")
        else:
            print("‚ö†Ô∏è ACK –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
        event_frame = f"~E{test_imei},1,{timestamp},Test event~"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è: {event_frame}")
        sock.send(event_frame.encode('utf-8'))
        
        time.sleep(0.5)
        sock.settimeout(2)
        response = sock.recv(1024)
        
        if response and b'ACK' in response:
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω ACK –æ—Ç–≤–µ—Ç: {response.decode('utf-8')}")
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è")
        else:
            print("‚ö†Ô∏è ACK –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        
        sock.close()
        
        print("\nüéâ –°–ï–†–í–ï–† –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        print("‚úÖ –í—Å–µ —Ç–∏–ø—ã –∫–∞–¥—Ä–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è")
        print("‚úÖ ACK –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        print("‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª Navtelecom –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def show_usage_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é."""
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ:")
    print("=" * 50)
    print("1. üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("2. üì± –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ NTC Configurator:")
    print("   - IP –∞–¥—Ä–µ—Å: –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
    print("   - –ü–æ—Ä—Ç: 5221")
    print("   - –ü—Ä–æ—Ç–æ–∫–æ–ª: TCP")
    print("3. üìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("   - python test_console.py - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("   - python show_data.py - –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
    print("4. ‚èπÔ∏è –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –≤ –æ–∫–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞")
    print()
    print("üîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã –∫–∞–¥—Ä–æ–≤:")
    print("   - ~A - GPS –¥–∞–Ω–Ω—ã–µ (–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, —Å–∫–æ—Ä–æ—Å—Ç—å, –∫—É—Ä—Å)")
    print("   - ~T - CAN –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)")
    print("   - ~X - –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ CAN –¥–∞–Ω–Ω—ã–µ")
    print("   - ~E - –°–æ–±—ã—Ç–∏—è")
    print()
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç ACK –æ—Ç–≤–µ—Ç—ã")
    print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    print("‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∫–∞–¥—Ä–æ–≤ Navtelecom")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if check_server_status():
        show_usage_instructions()
    else:
        print("\n‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python test_server_simple.py")


if __name__ == "__main__":
    main()

