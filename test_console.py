"""–¢–µ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º."""
import asyncio
import socket
import time
import random
from datetime import datetime


class ConsoleTest:
    """–¢–µ—Å—Ç —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞."""
        self.test_results = []
    
    def log_test(self, test_name: str, success: bool, details: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞."""
        status = "‚úÖ" if success else "‚ùå"
        self.test_results.append((test_name, success, details))
        print(f"{status} {test_name}")
        if details:
            print(f"    {details}")
    
    def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
        print("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect(('localhost', 5221))
            sock.close()
            self.log_test("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", True, "–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        except Exception as e:
            self.log_test("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", False, str(e))
            return False
    
    def test_gps_data(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ GPS –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüîç –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ GPS –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect(('localhost', 5221))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ GPS –∫–∞–¥—Ä–∞
            test_imei = "123456789012345"
            timestamp = int(time.time())
            lat = 55.7558 + random.uniform(-0.01, 0.01)
            lon = 37.6176 + random.uniform(-0.01, 0.01)
            speed = random.uniform(0, 60)
            satellites = random.randint(4, 12)
            hdop = round(random.uniform(1.0, 3.0), 1)
            
            gps_frame = f"~A{test_imei},{timestamp},{lat},{lon},{speed},90.0,{satellites},{hdop}~"
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {gps_frame}")
            sock.send(gps_frame.encode('utf-8'))
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            time.sleep(0.5)
            sock.settimeout(2)
            response = sock.recv(1024)
            
            if response and b'ACK' in response:
                self.log_test("GPS –¥–∞–Ω–Ω—ã–µ", True, f"–ü–æ–ª—É—á–µ–Ω ACK: {response.decode('utf-8')}")
                success = True
            else:
                self.log_test("GPS –¥–∞–Ω–Ω—ã–µ", False, "ACK –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                success = False
            
            sock.close()
            return success
            
        except Exception as e:
            self.log_test("GPS –¥–∞–Ω–Ω—ã–µ", False, str(e))
            return False
    
    def test_can_data(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ CAN –¥–∞–Ω–Ω—ã—Ö."""
        print("\nüîç –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ CAN –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect(('localhost', 5221))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ CAN –∫–∞–¥—Ä–∞
            test_imei = "123456789012345"
            can_id = "180"
            can_data = [f"{random.randint(0, 255):02X}" for _ in range(8)]
            can_data_str = ",".join(can_data)
            
            can_frame = f"~T{test_imei},{can_id},{can_data_str}~"
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {can_frame}")
            sock.send(can_frame.encode('utf-8'))
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            time.sleep(0.5)
            sock.settimeout(2)
            response = sock.recv(1024)
            
            if response and b'ACK' in response:
                self.log_test("CAN –¥–∞–Ω–Ω—ã–µ", True, f"–ü–æ–ª—É—á–µ–Ω ACK: {response.decode('utf-8')}")
                success = True
            else:
                self.log_test("CAN –¥–∞–Ω–Ω—ã–µ", False, "ACK –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                success = False
            
            sock.close()
            return success
            
        except Exception as e:
            self.log_test("CAN –¥–∞–Ω–Ω—ã–µ", False, str(e))
            return False
    
    def test_event_data(self):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."""
        print("\nüîç –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π...")
        
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect(('localhost', 5221))
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–¥—Ä–∞ —Å–æ–±—ã—Ç–∏—è
            test_imei = "123456789012345"
            event_type = 1
            timestamp = int(time.time())
            event_data = "Test event"
            
            event_frame = f"~E{test_imei},{event_type},{timestamp},{event_data}~"
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {event_frame}")
            sock.send(event_frame.encode('utf-8'))
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            time.sleep(0.5)
            sock.settimeout(2)
            response = sock.recv(1024)
            
            if response and b'ACK' in response:
                self.log_test("–°–æ–±—ã—Ç–∏—è", True, f"–ü–æ–ª—É—á–µ–Ω ACK: {response.decode('utf-8')}")
                success = True
            else:
                self.log_test("–°–æ–±—ã—Ç–∏—è", False, "ACK –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                success = False
            
            sock.close()
            return success
            
        except Exception as e:
            self.log_test("–°–æ–±—ã—Ç–∏—è", False, str(e))
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï NAVTELECOM –°–ï–†–í–ï–†–ê")
        print("=" * 50)
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
        self.test_connection()
        self.test_gps_data()
        self.test_can_data()
        self.test_event_data()
        
        # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        total_tests = len(self.test_results)
        passed_tests = sum(1 for _, success, _ in self.test_results if success)
        
        print("\n" + "=" * 50)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        print("=" * 50)
        
        for test_name, success, details in self.test_results:
            status = "‚úÖ" if success else "‚ùå"
            print(f"{status} {test_name}")
            if details:
                print(f"    {details}")
        
        print(f"\nüìà –ò—Ç–æ–≥–æ: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        
        if passed_tests == total_tests:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        elif passed_tests >= total_tests * 0.75:
            print("‚ö†Ô∏è –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
        else:
            print("‚ùå –ú–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        print("\nüí° –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("   python show_data.py")
        print("   python console_monitor.py")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    test = ConsoleTest()
    test.run_all_tests()


if __name__ == "__main__":
    main()

