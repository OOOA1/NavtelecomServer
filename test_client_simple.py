"""–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç."""
import asyncio
import socket
import time
import random
import json


class SimpleTestClient:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç."""
    
    def __init__(self, host='localhost', port=5221):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞."""
        self.host = host
        self.port = port
        self.socket = None
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É."""
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.socket.connect((self.host, self.port))
        print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.host}:{self.port}")
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."""
        if self.socket:
            self.socket.close()
            print("‚úì –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")
    
    def send_frame(self, frame: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–¥—Ä–∞."""
        if self.socket:
            self.socket.send(frame.encode('utf-8'))
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω: {frame}")
    
    def generate_gps_frame(self, imei: str, lat: float, lon: float, speed: float = 0.0) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è GPS –∫–∞–¥—Ä–∞."""
        timestamp = int(time.time())
        satellites = random.randint(4, 12)
        hdop = round(random.uniform(1.0, 3.0), 1)
        
        return f"~A{imei},{timestamp},{lat},{lon},{speed},90.0,{satellites},{hdop}~"
    
    def generate_can_frame(self, imei: str, can_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CAN –∫–∞–¥—Ä–∞."""
        can_data = [f"{random.randint(0, 255):02X}" for _ in range(8)]
        can_data_str = ",".join(can_data)
        
        return f"~T{imei},{can_id},{can_data_str}~"
    
    def generate_event_frame(self, imei: str, event_type: int = 1) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–¥—Ä–∞ —Å–æ–±—ã—Ç–∏—è."""
        timestamp = int(time.time())
        return f"~E{imei},{event_type},{timestamp},Test event~"


def test_basic_connection():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è."""
    print("üîç –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
    
    client = SimpleTestClient()
    
    try:
        client.connect()
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False
    finally:
        client.disconnect()


def test_gps_frames():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ GPS –∫–∞–¥—Ä–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç 2: GPS –∫–∞–¥—Ä—ã")
    
    client = SimpleTestClient()
    
    try:
        client.connect()
        
        test_imei = "123456789012345"
        base_lat = 55.7558  # –ú–æ—Å–∫–≤–∞
        base_lon = 37.6176
        
        for i in range(3):
            lat = base_lat + random.uniform(-0.01, 0.01)
            lon = base_lon + random.uniform(-0.01, 0.01)
            speed = random.uniform(0, 60)
            
            gps_frame = client.generate_gps_frame(test_imei, lat, lon, speed)
            client.send_frame(gps_frame)
            
            time.sleep(1)
        
        print("‚úì GPS –∫–∞–¥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ GPS: {e}")
        return False
    finally:
        client.disconnect()


def test_can_frames():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ CAN –∫–∞–¥—Ä–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç 3: CAN –∫–∞–¥—Ä—ã")
    
    client = SimpleTestClient()
    
    try:
        client.connect()
        
        test_imei = "123456789012345"
        
        for i in range(3):
            can_id = f"18{i:02X}"
            can_frame = client.generate_can_frame(test_imei, can_id)
            client.send_frame(can_frame)
            
            time.sleep(1)
        
        print("‚úì CAN –∫–∞–¥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ CAN: {e}")
        return False
    finally:
        client.disconnect()


def test_event_frames():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–¥—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π."""
    print("\nüîç –¢–µ—Å—Ç 4: –ö–∞–¥—Ä—ã —Å–æ–±—ã—Ç–∏–π")
    
    client = SimpleTestClient()
    
    try:
        client.connect()
        
        test_imei = "123456789012345"
        
        for event_type in [1, 2, 3]:
            event_frame = client.generate_event_frame(test_imei, event_type)
            client.send_frame(event_frame)
            
            time.sleep(1)
        
        print("‚úì –ö–∞–¥—Ä—ã —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
        return False
    finally:
        client.disconnect()


def test_mixed_frames():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤."""
    print("\nüîç –¢–µ—Å—Ç 5: –°–º–µ—à–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã")
    
    client = SimpleTestClient()
    
    try:
        client.connect()
        
        test_imei = "123456789012345"
        base_lat = 55.7558
        base_lon = 37.6176
        
        # GPS –∫–∞–¥—Ä
        gps_frame = client.generate_gps_frame(test_imei, base_lat, base_lon, 30.0)
        client.send_frame(gps_frame)
        time.sleep(1)
        
        # CAN –∫–∞–¥—Ä
        can_frame = client.generate_can_frame(test_imei, "180")
        client.send_frame(can_frame)
        time.sleep(1)
        
        # –°–æ–±—ã—Ç–∏–µ
        event_frame = client.generate_event_frame(test_imei, 1)
        client.send_frame(event_frame)
        time.sleep(1)
        
        print("‚úì –°–º–µ—à–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–º–µ—à–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤: {e}")
        return False
    finally:
        client.disconnect()


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Navtelecom —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)
    
    tests = [
        ("–ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", test_basic_connection),
        ("GPS –∫–∞–¥—Ä—ã", test_gps_frames),
        ("CAN –∫–∞–¥—Ä—ã", test_can_frames),
        ("–ö–∞–¥—Ä—ã —Å–æ–±—ã—Ç–∏–π", test_event_frames),
        ("–°–º–µ—à–∞–Ω–Ω—ã–µ –∫–∞–¥—Ä—ã", test_mixed_frames),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
            print(f"‚úì {test_name}: {'PASS' if result else 'FAIL'}")
        except Exception as e:
            results.append((test_name, False))
            print(f"‚úó {test_name}: ERROR - {e}")
    
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {sum(1 for _, result in results if result)}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if all(result for _, result in results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.")


if __name__ == "__main__":
    run_all_tests()

