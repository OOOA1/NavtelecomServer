"""–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É."""
import socket
import time
import random


def test_server_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É."""
    print("üîç –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
    print("=" * 40)
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect(('localhost', 5221))
        print("‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å–ø–µ—à–Ω–æ")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ GPS –∫–∞–¥—Ä–∞
        test_imei = "123456789012345"
        timestamp = int(time.time())
        lat = 55.7558 + random.uniform(-0.01, 0.01)
        lon = 37.6176 + random.uniform(-0.01, 0.01)
        speed = random.uniform(0, 60)
        satellites = random.randint(4, 12)
        hdop = round(random.uniform(1.0, 3.0), 1)
        
        gps_frame = f"~A{test_imei},{timestamp},{lat},{lon},{speed},90.0,{satellites},{hdop}~"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ GPS –∫–∞–¥—Ä–∞: {gps_frame}")
        sock.send(gps_frame.encode('utf-8'))
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        time.sleep(1)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
        try:
            sock.settimeout(2)
            response = sock.recv(1024)
            if response:
                print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.decode('utf-8')}")
            else:
                print("üì• –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        except socket.timeout:
            print("üì• –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ CAN –∫–∞–¥—Ä–∞
        can_id = "180"
        can_data = [f"{random.randint(0, 255):02X}" for _ in range(8)]
        can_data_str = ",".join(can_data)
        can_frame = f"~T{test_imei},{can_id},{can_data_str}~"
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ CAN –∫–∞–¥—Ä–∞: {can_frame}")
        sock.send(can_frame.encode('utf-8'))
        
        time.sleep(1)
        
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
        try:
            response = sock.recv(1024)
            if response:
                print(f"üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: {response.decode('utf-8')}")
            else:
                print("üì• –û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω")
        except socket.timeout:
            print("üì• –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞")
        
        print("‚úì –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except ConnectionRefusedError:
        print("‚úó –û—à–∏–±–∫–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5221")
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
    finally:
        try:
            sock.close()
            print("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        except:
            pass


def test_multiple_connections():
    """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π."""
    print("\nüîç –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    print("=" * 40)
    
    connections = []
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        for i in range(3):
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.connect(('localhost', 5221))
            connections.append(sock)
            print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        print(f"‚úì –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {len(connections)}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        for i, sock in enumerate(connections):
            test_imei = f"12345678901234{i}"
            timestamp = int(time.time())
            lat = 55.7558 + random.uniform(-0.01, 0.01)
            lon = 37.6176 + random.uniform(-0.01, 0.01)
            speed = random.uniform(0, 60)
            satellites = random.randint(4, 12)
            hdop = round(random.uniform(1.0, 3.0), 1)
            
            gps_frame = f"~A{test_imei},{timestamp},{lat},{lon},{speed},90.0,{satellites},{hdop}~"
            
            print(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {i+1}: {gps_frame}")
            sock.send(gps_frame.encode('utf-8'))
            
            time.sleep(0.5)
        
        print("‚úì –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        for i, sock in enumerate(connections):
            try:
                sock.close()
                print(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ {i+1} –∑–∞–∫—Ä—ã—Ç–æ")
            except:
                pass


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Navtelecom —Å–µ—Ä–≤–µ—Ä–∞")
    print("=" * 50)
    
    # –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    test_server_connection()
    
    # –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    test_multiple_connections()
    
    print("\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("1. –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    print("2. –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python simple_web_monitor.py")
    print("3. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ http://localhost:8080")
    print("4. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –≤ –æ–∫–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞")


if __name__ == "__main__":
    main()

