#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ SVOI Server.
"""
import sys
from pathlib import Path

def test_project_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞."""
    try:
        print("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
        
        base_path = Path(__file__).parent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫
        important_items = [
            "main.py",
            "requirements.txt",
            "README.md",
            "alembic.ini",
            "app/",
            "app/__init__.py",
            "app/settings.py",
            "app/api/",
            "app/api/main.py",
            "app/tcp_server.py",
            "app/models.py",
            "app/db.py",
            "database/",
            "dicts/",
            "runbooks/",
            "scripts/"
        ]
        
        missing_items = []
        
        for item in important_items:
            full_path = base_path / item
            if full_path.exists():
                print(f"‚úì {item}")
            else:
                print(f"‚úó {item} - –ù–ï –ù–ê–ô–î–ï–ù")
                missing_items.append(item)
        
        if missing_items:
            print(f"\n–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏: {missing_items}")
            return False
        else:
            print("\n‚úì –í—Å–µ –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏ –Ω–∞–π–¥–µ–Ω—ã!")
            return True
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
        return False

def test_file_contents():
    """–¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    try:
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤...")
        
        base_path = Path(__file__).parent
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º main.py
        main_py = base_path / "main.py"
        if main_py.exists():
            content = main_py.read_text(encoding='utf-8')
            if "SVOIServerApp" in content and "uvloop" in content:
                print("‚úì main.py —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
            else:
                print("‚úó main.py –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º requirements.txt
        req_txt = base_path / "requirements.txt"
        if req_txt.exists():
            content = req_txt.read_text(encoding='utf-8')
            required_packages = ["fastapi", "uvicorn", "sqlalchemy", "asyncpg"]
            missing_packages = []
            for package in required_packages:
                if package not in content.lower():
                    missing_packages.append(package)
            
            if missing_packages:
                print(f"‚úó requirements.txt –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞–∫–µ—Ç—ã: {missing_packages}")
                return False
            else:
                print("‚úì requirements.txt —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º README.md
        readme = base_path / "README.md"
        if readme.exists():
            content = readme.read_text(encoding='utf-8')
            if "SVOI Server" in content and "FastAPI" in content:
                print("‚úì README.md —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
            else:
                print("‚úó README.md –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
                return False
        
        print("‚úì –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ: {e}")
        return False

def test_backup_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."""
    try:
        print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        base_path = Path(__file__).parent.parent
        backup_path = base_path / "Svoi Server_backup"
        
        if backup_path.exists():
            print("‚úì –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–∞–π–¥–µ–Ω–∞")
            return True
        else:
            print("‚úó –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
            
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("=== –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç SVOI Server ===\n")
    
    # –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    structure_success = test_project_structure()
    
    # –¢–µ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    content_success = test_file_contents()
    
    # –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    backup_success = test_backup_exists()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===")
    print(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞: {'‚úì' if structure_success else '‚úó'}")
    print(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤: {'‚úì' if content_success else '‚úó'}")
    print(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {'‚úì' if backup_success else '‚úó'}")
    
    if all([structure_success, content_success, backup_success]):
        print("\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        print("–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –∏–∑ navtel-server –≤ Svoi Server.")
        print("\n–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
        print("2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python main.py")
        return 0
    else:
        print("\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)
