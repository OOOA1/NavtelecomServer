"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
import asyncio
import aiohttp
import json
import time
from datetime import datetime
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

from src.config import config


class ServerMonitor:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞."""
    
    def __init__(self, api_url='http://localhost:8080', api_key='your-secret-api-key'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞."""
        self.api_url = api_url
        self.headers = {'Authorization': f'Bearer {api_key}'}
        self.stats = {
            'requests': 0,
            'errors': 0,
            'last_check': None
        }
    
    async def check_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f'{self.api_url}/api/health') as response:
                    data = await response.json()
                    self.stats['requests'] += 1
                    self.stats['last_check'] = datetime.now()
                    
                    if response.status == 200:
                        print(f"‚úì –°–µ—Ä–≤–µ—Ä –∑–¥–æ—Ä–æ–≤: {data['status']}")
                        return True
                    else:
                        print(f"‚úó –°–µ—Ä–≤–µ—Ä –Ω–µ–∑–¥–æ—Ä–æ–≤: {data}")
                        self.stats['errors'] += 1
                        return False
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
            self.stats['errors'] += 1
            return False
    
    async def get_devices_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f'{self.api_url}/api/devices',
                    headers=self.headers
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        count = data.get('count', 0)
                        print(f"üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {count}")
                        return count
                    else:
                        print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {response.status}")
                        return 0
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
            return 0
    
    async def get_recent_activity(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f'{self.api_url}/api/devices',
                    headers=self.headers
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        devices = data.get('data', [])
                        
                        recent_devices = []
                        for device in devices:
                            if device.get('last_seen'):
                                last_seen = datetime.fromisoformat(
                                    device['last_seen'].replace('Z', '+00:00')
                                )
                                if (datetime.now() - last_seen.replace(tzinfo=None)).seconds < 300:  # 5 –º–∏–Ω—É—Ç
                                    recent_devices.append(device)
                        
                        print(f"üîÑ –ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(recent_devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                        return recent_devices
                    else:
                        return []
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
            return []
    
    def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤: {self.stats['requests']}")
        print(f"   –û—à–∏–±–æ–∫: {self.stats['errors']}")
        if self.stats['last_check']:
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.stats['last_check'].strftime('%H:%M:%S')}")
    
    async def run_monitoring(self, interval=60):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        print(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {interval}—Å)")
        print(f"üåê API URL: {self.api_url}")
        print("-" * 50)
        
        while True:
            try:
                print(f"\n‚è∞ {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
                health_ok = await self.check_health()
                
                if health_ok:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                    await self.get_devices_count()
                    await self.get_recent_activity()
                
                self.print_stats()
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                await asyncio.sleep(interval)
                
            except KeyboardInterrupt:
                print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚úó –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(interval)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    monitor = ServerMonitor()
    await monitor.run_monitoring(interval=30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥


if __name__ == "__main__":
    asyncio.run(main())

