"""–ë—ã—Å—Ç—Ä—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞."""
import json
import sys
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

from test_server_simple import server


def show_server_data():
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞."""
    print("üöÄ NAVTELECOM SERVER - –î–ê–ù–ù–´–ï")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    stats = server.stats
    all_devices = server.get_all_devices()
    
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {stats['connections_total']}")
    print(f"   üì° –ö–∞–¥—Ä–æ–≤: {stats['frames_processed']}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {stats['errors']}")
    print(f"   üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(all_devices)}")
    print()
    
    if not all_devices:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö")
        return
    
    # –î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    print("üì± –£–°–¢–†–û–ô–°–¢–í–ê:")
    print("-" * 30)
    
    for i, (unique_id, device_data) in enumerate(all_devices.items(), 1):
        print(f"{i}. üì± {unique_id}")
        print(f"   üïê –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {device_data['last_seen'].strftime('%H:%M:%S')}")
        
        # GPS –ø–æ–∑–∏—Ü–∏–∏
        positions = device_data.get('positions', [])
        print(f"   üìç GPS: {len(positions)} –ø–æ–∑–∏—Ü–∏–π")
        
        if positions:
            last_pos = positions[-1]
            print(f"   üìç –ü–æ—Å–ª–µ–¥–Ω—è—è: ({last_pos['latitude']:.6f}, {last_pos['longitude']:.6f})")
            print(f"   üöó –°–∫–æ—Ä–æ—Å—Ç—å: {last_pos['speed']:.1f} –∫–º/—á")
        
        # CAN –¥–∞–Ω–Ω—ã–µ
        can_data = device_data.get('can_data', [])
        print(f"   üîß CAN: {len(can_data)} –∑–∞–ø–∏—Å–µ–π")
        
        if can_data:
            last_can = can_data[-1]
            print(f"   üîß –ü–æ—Å–ª–µ–¥–Ω–∏–π CAN ID: {last_can['can_id']}")
        
        # –°–æ–±—ã—Ç–∏—è
        events = device_data.get('events', [])
        print(f"   üì¢ –°–æ–±—ã—Ç–∏—è: {len(events)}")
        
        print()


def export_data():
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON."""
    all_devices = server.get_all_devices()
    
    if not all_devices:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_data = {}
    for unique_id, device_data in all_devices.items():
        export_data[unique_id] = {
            'last_seen': device_data['last_seen'].isoformat(),
            'positions': [
                {
                    **pos,
                    'fix_time': pos['fix_time'].isoformat()
                }
                for pos in device_data.get('positions', [])
            ],
            'can_data': device_data.get('can_data', []),
            'events': [
                {
                    **event,
                    'event_time': event['event_time'].isoformat()
                }
                for event in device_data.get('events', [])
            ]
        }
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    filename = f"server_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(export_data, f, indent=2, ensure_ascii=False)
    
    print(f"üíæ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        show_server_data()
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ
        if server.get_all_devices():
            print("üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON? (y/n): ", end="")
            try:
                choice = input().lower().strip()
                if choice in ['y', 'yes', '–¥–∞', '–¥']:
                    export_data()
            except KeyboardInterrupt:
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()

