"""–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API."""
import asyncio
import aiohttp
import json
from datetime import datetime, timedelta


class APIExamples:
    """–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å API."""
    
    def __init__(self, base_url='http://localhost:8080', api_key='your-secret-api-key'):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è."""
        self.base_url = base_url
        self.headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json'
        }
    
    async def example_get_all_devices(self):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""
        print("=== –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'{self.base_url}/api/devices',
                headers=self.headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {data['count']}")
                    
                    for device in data['data']:
                        print(f"  - {device['unique_id']}: {device.get('name', '–ë–µ–∑ –∏–º–µ–Ω–∏')}")
                        if device.get('last_seen'):
                            print(f"    –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {device['last_seen']}")
                else:
                    print(f"–û—à–∏–±–∫–∞: {response.status}")
    
    async def example_get_device_positions(self, unique_id='123456789012345'):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
        print(f"=== –ü–æ–∑–∏—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {unique_id} ===")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'{self.base_url}/api/devices/{unique_id}/positions?limit=5',
                headers=self.headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {data['count']}")
                    
                    for pos in data['data']:
                        print(f"  - {pos['fix_time']}: "
                              f"({pos['latitude']:.6f}, {pos['longitude']:.6f}) "
                              f"—Å–∫–æ—Ä–æ—Å—Ç—å: {pos.get('speed', 0):.1f} –∫–º/—á")
                else:
                    print(f"–û—à–∏–±–∫–∞: {response.status}")
    
    async def example_get_last_position(self, unique_id='123456789012345'):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏."""
        print(f"=== –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {unique_id} ===")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'{self.base_url}/api/devices/{unique_id}/last',
                headers=self.headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if data['data']:
                        pos = data['data']
                        print(f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è:")
                        print(f"  –í—Ä–µ–º—è: {pos['fix_time']}")
                        print(f"  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ({pos['latitude']:.6f}, {pos['longitude']:.6f})")
                        print(f"  –°–∫–æ—Ä–æ—Å—Ç—å: {pos.get('speed', 0):.1f} –∫–º/—á")
                        print(f"  –ö—É—Ä—Å: {pos.get('course', 0):.1f}¬∞")
                        print(f"  –°–ø—É—Ç–Ω–∏–∫–∏: {pos.get('satellites', 0)}")
                    else:
                        print("–ü–æ–∑–∏—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    print(f"–û—à–∏–±–∫–∞: {response.status}")
    
    async def example_get_can_data(self, unique_id='123456789012345'):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è CAN –¥–∞–Ω–Ω—ã—Ö."""
        print(f"=== CAN –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {unique_id} ===")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'{self.base_url}/api/devices/{unique_id}/can?limit=5',
                headers=self.headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"–ù–∞–π–¥–µ–Ω–æ CAN –∑–∞–ø–∏—Å–µ–π: {data['count']}")
                    
                    for can in data['data']:
                        print(f"  - {can['received_at']}: CAN ID {can['can_id']}")
                        can_data = json.loads(can['can_data'])
                        print(f"    –î–∞–Ω–Ω—ã–µ: {can_data.get('hex_data', 'N/A')}")
                        if can.get('latitude') and can.get('longitude'):
                            print(f"    –ü–æ–∑–∏—Ü–∏—è: ({can['latitude']:.6f}, {can['longitude']:.6f})")
                else:
                    print(f"–û—à–∏–±–∫–∞: {response.status}")
    
    async def example_get_raw_frames(self, unique_id='123456789012345'):
        """–ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –∫–∞–¥—Ä–æ–≤."""
        print(f"=== –°—ã—Ä—ã–µ –∫–∞–¥—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {unique_id} ===")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'{self.base_url}/api/devices/{unique_id}/frames?limit=3',
                headers=self.headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: {data['count']}")
                    
                    for frame in data['data']:
                        print(f"  - {frame['received_at']}: {frame['frame_type']} –∫–∞–¥—Ä")
                        print(f"    –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ: {frame['raw_data']}")
                        if frame.get('parsed_data'):
                            parsed = json.loads(frame['parsed_data'])
                            print(f"    –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {parsed}")
                else:
                    print(f"–û—à–∏–±–∫–∞: {response.status}")
    
    async def example_filter_by_type(self, unique_id='123456789012345', frame_type='A'):
        """–ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–¥—Ä–æ–≤ –ø–æ —Ç–∏–ø—É."""
        print(f"=== {frame_type} –∫–∞–¥—Ä—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {unique_id} ===")
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f'{self.base_url}/api/devices/{unique_id}/frames?type={frame_type}&limit=3',
                headers=self.headers
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"–ù–∞–π–¥–µ–Ω–æ {frame_type} –∫–∞–¥—Ä–æ–≤: {data['count']}")
                    
                    for frame in data['data']:
                        print(f"  - {frame['received_at']}: {frame['raw_data']}")
                else:
                    print(f"–û—à–∏–±–∫–∞: {response.status}")
    
    async def run_all_examples(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{self.base_url}/api/health') as response:
                if response.status == 200:
                    print("‚úì –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    print("‚úó –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    return
        
        # –ü—Ä–∏–º–µ—Ä—ã
        await self.example_get_all_devices()
        print()
        
        await self.example_get_last_position()
        print()
        
        await self.example_get_device_positions()
        print()
        
        await self.example_get_can_data()
        print()
        
        await self.example_get_raw_frames()
        print()
        
        await self.example_filter_by_type(frame_type='A')
        print()
        
        await self.example_filter_by_type(frame_type='T')
        print()
        
        print("‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    examples = APIExamples()
    await examples.run_all_examples()


if __name__ == "__main__":
    asyncio.run(main())

